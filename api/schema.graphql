type Query {
  search(
    searchString: String
    genreId: ID
    parentPlatformId: ID
    offset: Int
    limit: Int
    order: String = ""
  ): [Game!]
    @cypher(
      statement: """
      CALL apoc.do.when(
        searchString IS NULL,
        'MATCH (node:Game) RETURN node',
        'CALL db.index.fulltext.queryNodes(index, searchString) YIELD node',
        {searchString: $searchString, index: 'gameNameIndex'}
      ) YIELD value
      WITH value.node AS node
      CALL apoc.do.when(
        $genreId IS NULL,
        'RETURN node',
        'MATCH (node)-[:HAS_GENRE]->(:Genre {id: genreId}) RETURN node',
        {genreId: $genreId, node: node}
      ) YIELD value
      WITH value.node AS node
      CALL apoc.do.when(
        $parentPlatformId IS NULL,
        'RETURN node',
        'MATCH (:ParentPlatform {id: parentPlatformId})<-[:IN_CATEGORY]-(:Platform)-[:CAN_PLAY]->(node) RETURN node',
        {parentPlatformId: $parentPlatformId, node: node}
      ) YIELD value
      WITH value.node AS node
      RETURN DISTINCT node
      ORDER BY node[$order] DESC
      SKIP $offset LIMIT $limit
      """
    )
}

type Developer {
  games: [Game!]! @relationship(type: "DEVELOP", direction: OUT)
  id: ID!
  name: String!
  slug: String!
}

type Game {
  background_image: String
  description_raw: String!
  developers: [Developer!]! @relationship(type: "DEVELOP", direction: IN)
  genres: [Genre!]! @relationship(type: "HAS_GENRE", direction: OUT)
  tags: [Tag!]! @relationship(type: "HAS_TAG", direction: OUT)
  id: ID!
  metacritic: Float
  name: String!
  platforms: [Platform!]! @relationship(type: "CAN_PLAY", direction: IN)
  parent_platforms: [ParentPlatform!]!
    @cypher(
      statement: """
      MATCH (this)<-[:CAN_PLAY]-(:Platform)-[:IN_CATEGORY]->(pp:ParentPlatform)
      RETURN DISTINCT pp
      """
    )
  publishers: [Publisher!]! @relationship(type: "PUBLISH", direction: IN)
  rating: Float!
  rating_top: Float!
  released: Date
  screen_shots: [String]!
  slug: String!
}

type Genre {
  games: [Game!]! @relationship(type: "HAS_GENRE", direction: IN)
  id: ID!
  image_background: String!
  name: String!
  slug: String!
}

type ParentPlatform {
  id: ID!
  name: String!
  platforms: [Platform!]! @relationship(type: "IN_CATEGORY", direction: IN)
  slug: String!
}

type Platform {
  games: [Game!]! @relationship(type: "CAN_PLAY", direction: OUT)
  id: ID!
  parent_platforms: [ParentPlatform!]!
    @relationship(type: "IN_CATEGORY", direction: OUT)
  name: String!
  slug: String!
}

type Publisher {
  id: ID!
  name: String!
  games: [Game!]! @relationship(type: "PUBLISH", direction: OUT)
  slug: String!
}

type Tag {
  games: [Game!]! @relationship(type: "HAS_TAG", direction: IN)
  id: ID!
  name: String!
  slug: String!
}
